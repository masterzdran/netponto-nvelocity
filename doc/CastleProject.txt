Castle Project
To use NVelocity View Engine inform the type on the customEngine on the configuration file:
	<viewEngine 
	viewPathRoot="views" 
	customEngine="Castle.MonoRail.Framework.Views.NVelocity.NVelocityViewEngine, Castle.MonoRail.Framework.Views.NVelocity" />
NVelocity files
	NVelocity uses the extension .vm so just create your views with that extension. Remember that from your controller you should not reference file extensions when defining views to render.
Layouts
	Use the $childContent context variable to render the content of the view on the layout template
	Order of execution
		The view template selected by the controller is executed before the layout template. In fact the layout template is merged with the result of the view template execution.
Configuration
	The NVelocity View Engine looks for a file nvelocity.properties in the root of the view folder
Macros
	NVelocity supports macros, but keep in mind that they have problems. If you want to use macros you can create a folder macros under your views root folder.
	All .vm files in this folder will be loaded as a NVelocity Macro library so the macros will be available to all templates.
Fancy foreach Loops
	#foreach($i in $items)
	#each (this is optional since it's the default section)
       text which appears for each item
	#before
       text which appears before each item
	#after
       text which appears after each item
	#between
       text which appears between each two items
	#odd
       text which appears for every other item, including the first
	#even
       text which appears for every other item, starting with the second
	#nodata
       Content rendered if $items evaluated to null or empty
	#beforeall
       text which appears before the loop, only if there are items matching condition
	#afterall
       text which appears after the loop, only of there are items matching condition
	#end
NVelocityViewEngine Variables
	Context Variable	Description
	$controller			The controller being executed.
	$context			The IRailsEngineContext.
	$request			context.Request
	$response			context.Response
	$session			context.Session
	$childContent		Used inside Layouts. It defines the content rendered by a View.
	$page				Available in *.njs views and is added in the GenerateJS method.
	$siteroot			context.ApplicationPath
	Additionally - the contents of the following collections are merged into the context:
		controller.Resources
		context.Params
		controller.Helpers
		context.Flash
		controller.PropertyBag
	Each key in each of the collections becomes a $variable. For example:
		class MyController 
		{
    		public void Index() 
    		{
       			PropertyBag["myvariable"] = "some value";
       			Context.Params["othervariable"] = "some other value value";
       			Context.Flash["anothervariable"] = "yet one more";
    		}
		}	
	In your view you will have the following variables:
		$myvariable
		$othervariable
		$anothervariable
	Helpers are also added to allow you to invoke static members on some common types:
	$Byte
	$SByte
	$Int16
	$Int32
	$Int64
	$UInt16
	$UInt32
	$UInt64
	$Single
	$Double
	$Boolean
	$Char
	$Decimal
	$String
	$Guid
	$DateTime
Accessing the PropertyBag
	If you want to list the variables in the property bag - then add a reference to the PropertyBag:
		class MyController 
		{
    	public void Index() 
    	{
        	PropertyBag["PropertyBag"] = PropertyBag;
    	}
		}
	then in your view $PropertyBag is what you want
		$PropertyBag.get_Item($key)
ViewComponent Support
	NVelocity allows you to create your own directives, so that's how we introduced components to it. Basically you can use:
		For inline components: #component(ComponentName)
		For components with body content (aka block components): #blockcomponent(ComponentName) some content #end
	ViewComponents have access to the IRailsContext so you can access form parameters, session, etc
Passing Parameters in a Dictionary
	Use the name of the component followed by a dictionary string
		#component(MyFirstComponent "%{firstParam='some value',anotherParam='other value'}")
	You can then access the parameters from the component code:
		public class MyFirstComponent: ViewComponent
		{
    		public override void Render()
    		{
        		object param1 = Context.ComponentParameters["firstParam"];
        		object param2 = Context.ComponentParameters["anotherParam"];
 		        ...
    		}
		}
Key/Value Pairs
	In this case you need to use the keyword with followed by a sequence of key/value pairs:
		#component(ComponentName with "name=john" "address=some address")
	You're free to use interpolation as well
		#component(ComponentName with "name=${customer.name}")
	You can gain access to the component parameters using the Context.ComponentParameters too.
Data Type Handling
	Every data type is supported. However literal values will be automatically converted to text. If you want to specify a different type, create a varible on NVelocity or use some structure data available on the view.
	The parameter value below will be converted to string
		#component(ComponentName with "age=1")
	The parameter value below will remain an Int32
		#set($age = 27)
		#component(ComponentName with "age=${age}")
		